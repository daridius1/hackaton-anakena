"""
Adaptador de prompts seg√∫n perfil del usuario
Personaliza la generaci√≥n de guiones basado en edad, nivel y estilo
"""


class StoryAdapter:
    """
    Adapta los prompts de generaci√≥n seg√∫n el perfil del usuario
    """
    
    def adaptar_prompt_guion(self, prompt_base, perfil_usuario):
        """
        Modifica el prompt de Pipeline1Guion seg√∫n preferencias del usuario.
        
        Args:
            prompt_base (str): Prompt original del pipeline
            perfil_usuario: Instancia de PerfilUsuario
            
        Returns:
            str: Prompt adaptado
        """
        
        # Obtener par√°metros del perfil
        edad = perfil_usuario.edad_nino
        nivel = perfil_usuario.nivel_complejidad
        estilo = perfil_usuario.estilo_narrativo
        temas = perfil_usuario.temas_favoritos
        
        # Construir adaptaciones
        adaptaciones = self._build_adaptaciones(edad, nivel, estilo, temas)
        
        # Insertar adaptaciones en el prompt
        prompt_adaptado = f"""{prompt_base}

PERSONALIZACIONES OPCIONALES (solo aplicar si es compatible con la moraleja principal):
{adaptaciones}

‚ö†Ô∏è IMPORTANTE: La moraleja especificada arriba es PRIORITARIA sobre las personalizaciones.
Si hay conflicto entre la moraleja y estas sugerencias de estilo, la moraleja SIEMPRE gana."""
        
        return prompt_adaptado
    
    def _build_adaptaciones(self, edad, nivel, estilo, temas):
        """Construye las instrucciones de adaptaci√≥n"""
        
        adaptaciones = []
        
        # 1. Adaptaci√≥n por EDAD
        adaptaciones.append(self._adaptar_por_edad(edad))
        
        # 2. Adaptaci√≥n por NIVEL DE COMPLEJIDAD
        adaptaciones.append(self._adaptar_por_nivel(nivel, edad))
        
        # 3. Adaptaci√≥n por ESTILO NARRATIVO
        adaptaciones.append(self._adaptar_por_estilo(estilo))
        
        # 4. Adaptaci√≥n por TEMAS FAVORITOS
        if temas:
            adaptaciones.append(self._adaptar_por_temas(temas))
        
        return '\n'.join(adaptaciones)
    
    def _adaptar_por_edad(self, edad):
        """Adaptaci√≥n seg√∫n la edad del ni√±o"""
        if edad <= 5:
            return f"""
üìÖ EDAD: {edad} a√±os (Preescolar)
- Vocabulario: MUY SIMPLE (m√°ximo 80 palabras diferentes)
- N√∫mero de escenas: 5-6 (corto, mantiene atenci√≥n)
- Duraci√≥n total: 5-6 minutos
- Conceptos: CONCRETOS (no abstractos)
- Frases: CORTAS (m√°ximo 10 palabras)
- Repetici√≥n: USAR frases repetitivas para reforzar
"""
        elif edad <= 7:
            return f"""
üìÖ EDAD: {edad} a√±os (Inicial)
- Vocabulario: SIMPLE (100-120 palabras diferentes)
- N√∫mero de escenas: 6-7
- Duraci√≥n total: 7-8 minutos
- Conceptos: SIMPLES con ejemplos concretos
- Frases: MODERADAS (10-15 palabras)
"""
        elif edad <= 9:
            return f"""
üìÖ EDAD: {edad} a√±os (Primaria)
- Vocabulario: INTERMEDIO (150-200 palabras)
- N√∫mero de escenas: 7-8
- Duraci√≥n total: 8-9 minutos
- Conceptos: COMBINACI√ìN de concreto y abstracto
- Frases: VARIADAS (hasta 20 palabras)
"""
        else:
            return f"""
üìÖ EDAD: {edad} a√±os (Avanzado)
- Vocabulario: RICO (200+ palabras diferentes)
- N√∫mero de escenas: 8-10
- Duraci√≥n total: 9-10 minutos
- Conceptos: ABSTRACTOS permitidos
- Frases: COMPLEJAS (estructuras variadas)
"""
    
    def _adaptar_por_nivel(self, nivel, edad):
        """Adaptaci√≥n seg√∫n nivel de complejidad"""
        niveles = {
            'simple': f"""
üìö NIVEL: SIMPLE
- Trama: LINEAL (inicio ‚Üí problema ‚Üí soluci√≥n ‚Üí final)
- Personajes: 2-3 M√ÅXIMO
- Conflicto: UNO SOLO, muy claro
- Lecci√≥n: EXPL√çCITA (los personajes la dicen directamente)
- Explicaciones: DIRECTAS, sin met√°foras complejas
""",
            'medio': f"""
üìö NIVEL: MEDIO
- Trama: CON GIROS (peque√±os desaf√≠os adicionales)
- Personajes: 3-4, con roles definidos
- Conflicto: PRINCIPAL + 1 secundario
- Lecci√≥n: SEMI-IMPL√çCITA (se deduce con ayuda)
- Explicaciones: ALGUNOS s√≠miles simples permitidos
""",
            'avanzado': f"""
üìö NIVEL: AVANZADO
- Trama: MULTICAPA (subtramas entrelazadas)
- Personajes: 4-5, con desarrollo de personalidad
- Conflicto: M√öLTIPLES niveles
- Lecci√≥n: IMPL√çCITA (el ni√±o la descubre)
- Explicaciones: MET√ÅFORAS y SIMBOLISMO apropiados
"""
        }
        return niveles.get(nivel, niveles['medio'])
    
    def _adaptar_por_estilo(self, estilo):
        """Adaptaci√≥n seg√∫n estilo narrativo"""
        estilos = {
            'aventurero': """
üé≠ ESTILO: AVENTURERO
- Tono: ENERG√âTICO, emocionante
- Ritmo: R√ÅPIDO, con mucha acci√≥n
- Escenarios: DIN√ÅMICOS (bosques, monta√±as, exploraciones)
- Verbos: De ACCI√ìN (correr, saltar, descubrir, explorar)
- Emociones: INTENSAS pero positivas
- Elementos: Desaf√≠os f√≠sicos, descubrimientos, valent√≠a
Ejemplo: "¬°Lucas corri√≥ veloz hacia la cueva misteriosa!"
""",
            'educativo': """
üé≠ ESTILO: EDUCATIVO
- Tono: DID√ÅCTICO, explicativo
- Ritmo: PAUSADO, reflexivo
- Escenarios: COTIDIANOS (escuela, casa, parque)
- Verbos: De APRENDIZAJE (aprender, entender, pensar, descubrir)
- Emociones: MODERADAS, enfocadas en comprensi√≥n
- Elementos: Explicaciones claras, ejemplos, conclusiones
Ejemplo: "El Abuelo Sabio explic√≥: 'La honestidad es como una semilla...'"
""",
            'fantastico': """
üé≠ ESTILO: FANT√ÅSTICO
- Tono: M√ÅGICO, maravilloso
- Ritmo: ENVOLVENTE, misterioso
- Escenarios: IMAGINATIVOS (bosques encantados, castillos, nubes)
- Verbos: De MAGIA (brillar, transformar, aparecer, volar)
- Emociones: ASOMBRO, maravilla
- Elementos: Criaturas m√°gicas, poderes especiales, transformaciones
Ejemplo: "Las flores brillaron con luz dorada cuando Sof√≠a dijo la verdad"
"""
        }
        return estilos.get(estilo, estilos['aventurero'])
    
    def _adaptar_por_temas(self, temas):
        """Adaptaci√≥n seg√∫n temas favoritos"""
        temas_str = ', '.join(temas)
        return f"""
üé® TEMAS FAVORITOS: {temas_str}
- Incorporar estos elementos en las escenas cuando sea posible
- Si el tema es "animales": incluir mascotas, animales del bosque, etc.
- Si el tema es "aventura": incluir exploraciones, descubrimientos
- Si el tema es "amistad": enfatizar relaciones entre personajes
- Si el tema es "ciencia": incluir experimentos, descubrimientos
- Si el tema es "naturaleza": escenarios al aire libre, plantas, ecosistemas
"""
